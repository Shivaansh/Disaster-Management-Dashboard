{"ast":null,"code":"import _toConsumableArray from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import io from'socket.io-client';var socket=io('http://localhost:3001');var Error=/*#__PURE__*/function(_React$Component){_inherits(Error,_React$Component);var _super=_createSuper(Error);function Error(props){var _this;_classCallCheck(this,Error);_this=_super.call(this,props);// An array of social media posts messages, and we'll increment nextID\n// to maintain a unique ID for each post in our array\n_this.state={posts:[],nextID:0};// We can setup the event handlers for the messages in the constructor...\nsocket.on('connect',function(){console.log(\"Connect....\");// When we receive a social media message, call setState and insert \n// it into the array of posts\nsocket.on('post',function(data){// Can uncomment this to see the raw data coming in...\n// console.log(\"post: \" + JSON.stringify(data));\n// increment the next unique ID, and put post data into the list of \n// posts... use the '...' syntax to make this insertion easier:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \nthis.setState({posts:[].concat(_toConsumableArray(this.state.posts),[{name:data.name,image:data.image,content:data.content,problem:data.problem,priority:data.priority,id:this.state.nextID}]),nextID:this.state.nextID+1});}.bind(this));// ^^ Like other event handlers, we bind the callback function to the \n// component so we can use setState        \n}.bind(_assertThisInitialized(_this)));// ^^ ... And same with the callback function for when a connection is made\nreturn _this;}// Output all the posts into a table\n_createClass(Error,[{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"ERROR PAGE\"));}}]);return Error;}(React.Component);export default Error;","map":{"version":3,"sources":["D:/Docs/Study Material - McMaster/Year 4/Term 1/4HC3/Assignments/A4/Shivaansh Prasann - Code Review Submission/frontend/src/components/Error.js"],"names":["React","io","socket","Error","props","state","posts","nextID","on","console","log","data","setState","name","image","content","problem","priority","id","bind","Component"],"mappings":"g/CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAOC,CAAAA,EAAP,KAAe,kBAAf,CACA,GAAMC,CAAAA,MAAM,CAAGD,EAAE,CAAC,uBAAD,CAAjB,C,GAEME,CAAAA,K,0GAEF,eAAYC,KAAZ,CAAmB,uCACf,uBAAMA,KAAN,EAEA;AACA;AACA,MAAKC,KAAL,CAAa,CAAEC,KAAK,CAAE,EAAT,CAAaC,MAAM,CAAE,CAArB,CAAb,CAEA;AACAL,MAAM,CAACM,EAAP,CAAU,SAAV,CAAqB,UAAY,CAE7BC,OAAO,CAACC,GAAR,CAAY,aAAZ,EAEA;AACA;AACAR,MAAM,CAACM,EAAP,CAAU,MAAV,CAEI,SAAUG,IAAV,CAAgB,CAEZ;AACA;AAEA;AACA;AACA;AACA,KAAKC,QAAL,CACI,CACIN,KAAK,8BAAM,KAAKD,KAAL,CAAWC,KAAjB,GACL,CACIO,IAAI,CAAEF,IAAI,CAACE,IADf,CAEIC,KAAK,CAAEH,IAAI,CAACG,KAFhB,CAGIC,OAAO,CAAEJ,IAAI,CAACI,OAHlB,CAIIC,OAAO,CAAEL,IAAI,CAACK,OAJlB,CAKIC,QAAQ,CAAEN,IAAI,CAACM,QALnB,CAMIC,EAAE,CAAE,KAAKb,KAAL,CAAWE,MANnB,CADK,EADT,CAUMA,MAAM,CAAE,KAAKF,KAAL,CAAWE,MAAX,CAAoB,CAVlC,CADJ,EAaH,CArBD,CAqBEY,IArBF,CAqBO,IArBP,CAFJ,EAwBA;AACA;AAEH,CAjCoB,CAiCnBA,IAjCmB,+BAArB,EAkCA;AA1Ce,aA4ClB,CAED;wCACA,iBAAS,CACL,mBACI,4CACI,2CADJ,CADJ,CAMH,C,mBAxDenB,KAAK,CAACoB,S,EA2D1B,cAAejB,CAAAA,KAAf","sourcesContent":["import React from 'react';\r\n\r\nimport io from 'socket.io-client';\r\nconst socket = io('http://localhost:3001');\r\n\r\nclass Error extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // An array of social media posts messages, and we'll increment nextID\r\n        // to maintain a unique ID for each post in our array\r\n        this.state = { posts: [], nextID: 0 };\r\n\r\n        // We can setup the event handlers for the messages in the constructor...\r\n        socket.on('connect', function () {\r\n\r\n            console.log(\"Connect....\");\r\n\r\n            // When we receive a social media message, call setState and insert \r\n            // it into the array of posts\r\n            socket.on('post',\r\n\r\n                function (data) {\r\n\r\n                    // Can uncomment this to see the raw data coming in...\r\n                    // console.log(\"post: \" + JSON.stringify(data));\r\n\r\n                    // increment the next unique ID, and put post data into the list of \r\n                    // posts... use the '...' syntax to make this insertion easier:\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \r\n                    this.setState(\r\n                        {\r\n                            posts: [...this.state.posts,\r\n                            {\r\n                                name: data.name,\r\n                                image: data.image,\r\n                                content: data.content,\r\n                                problem: data.problem,\r\n                                priority: data.priority,\r\n                                id: this.state.nextID\r\n                            }]\r\n                            , nextID: this.state.nextID + 1\r\n                        });\r\n                }.bind(this));\r\n            // ^^ Like other event handlers, we bind the callback function to the \r\n            // component so we can use setState        \r\n\r\n        }.bind(this));\r\n        // ^^ ... And same with the callback function for when a connection is made\r\n\r\n    }\r\n\r\n    // Output all the posts into a table\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>ERROR PAGE</h2>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Error;"]},"metadata":{},"sourceType":"module"}