{"ast":null,"code":"var _jsxFileName = \"D:\\\\Docs\\\\Study Material - McMaster\\\\Year 4\\\\Term 1\\\\4HC3\\\\Assignments\\\\A4\\\\Shivaansh Prasann - Code Review Submission\\\\frontend\\\\src\\\\components\\\\Error.js\";\nimport React from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001');\n\nclass Error extends React.Component {\n  constructor(props) {\n    super(props); // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n\n    this.state = {\n      posts: [],\n      nextID: 0\n    }; // We can setup the event handlers for the messages in the constructor...\n\n    socket.on('connect', function () {\n      console.log(\"Connect....\"); // When we receive a social media message, call setState and insert \n      // it into the array of posts\n\n      socket.on('post', function (data) {\n        // Can uncomment this to see the raw data coming in...\n        // console.log(\"post: \" + JSON.stringify(data));\n        // increment the next unique ID, and put post data into the list of \n        // posts... use the '...' syntax to make this insertion easier:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n        this.setState({\n          posts: [...this.state.posts, {\n            name: data.name,\n            image: data.image,\n            content: data.content,\n            problem: data.problem,\n            priority: data.priority,\n            id: this.state.nextID\n          }],\n          nextID: this.state.nextID + 1\n        });\n      }.bind(this)); // ^^ Like other event handlers, we bind the callback function to the \n      // component so we can use setState        \n    }.bind(this)); // ^^ ... And same with the callback function for when a connection is made\n  } // Output all the posts into a table\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"ERROR PAGE\"));\n  }\n\n}\n\nexport default Error;","map":{"version":3,"sources":["D:/Docs/Study Material - McMaster/Year 4/Term 1/4HC3/Assignments/A4/Shivaansh Prasann - Code Review Submission/frontend/src/components/Error.js"],"names":["React","io","socket","Error","Component","constructor","props","state","posts","nextID","on","console","log","data","setState","name","image","content","problem","priority","id","bind","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;;AAEA,MAAME,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,MAAM,EAAE;AAArB,KAAb,CALe,CAOf;;AACAP,IAAAA,MAAM,CAACQ,EAAP,CAAU,SAAV,EAAqB,YAAY;AAE7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAF6B,CAI7B;AACA;;AACAV,MAAAA,MAAM,CAACQ,EAAP,CAAU,MAAV,EAEI,UAAUG,IAAV,EAAgB;AAEZ;AACA;AAEA;AACA;AACA;AACA,aAAKC,QAAL,CACI;AACIN,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EACP;AACIO,YAAAA,IAAI,EAAEF,IAAI,CAACE,IADf;AAEIC,YAAAA,KAAK,EAAEH,IAAI,CAACG,KAFhB;AAGIC,YAAAA,OAAO,EAAEJ,IAAI,CAACI,OAHlB;AAIIC,YAAAA,OAAO,EAAEL,IAAI,CAACK,OAJlB;AAKIC,YAAAA,QAAQ,EAAEN,IAAI,CAACM,QALnB;AAMIC,YAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWE;AANnB,WADO,CADX;AAUMA,UAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAAX,GAAoB;AAVlC,SADJ;AAaH,OArBD,CAqBEY,IArBF,CAqBO,IArBP,CAFJ,EAN6B,CA8B7B;AACA;AAEH,KAjCoB,CAiCnBA,IAjCmB,CAiCd,IAjCc,CAArB,EARe,CA0Cf;AAEH,GA9C+B,CAgDhC;;;AACAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ;AAMH;;AAxD+B;;AA2DpC,eAAenB,KAAf","sourcesContent":["import React from 'react';\r\n\r\nimport io from 'socket.io-client';\r\nconst socket = io('http://localhost:3001');\r\n\r\nclass Error extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // An array of social media posts messages, and we'll increment nextID\r\n        // to maintain a unique ID for each post in our array\r\n        this.state = { posts: [], nextID: 0 };\r\n\r\n        // We can setup the event handlers for the messages in the constructor...\r\n        socket.on('connect', function () {\r\n\r\n            console.log(\"Connect....\");\r\n\r\n            // When we receive a social media message, call setState and insert \r\n            // it into the array of posts\r\n            socket.on('post',\r\n\r\n                function (data) {\r\n\r\n                    // Can uncomment this to see the raw data coming in...\r\n                    // console.log(\"post: \" + JSON.stringify(data));\r\n\r\n                    // increment the next unique ID, and put post data into the list of \r\n                    // posts... use the '...' syntax to make this insertion easier:\r\n                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \r\n                    this.setState(\r\n                        {\r\n                            posts: [...this.state.posts,\r\n                            {\r\n                                name: data.name,\r\n                                image: data.image,\r\n                                content: data.content,\r\n                                problem: data.problem,\r\n                                priority: data.priority,\r\n                                id: this.state.nextID\r\n                            }]\r\n                            , nextID: this.state.nextID + 1\r\n                        });\r\n                }.bind(this));\r\n            // ^^ Like other event handlers, we bind the callback function to the \r\n            // component so we can use setState        \r\n\r\n        }.bind(this));\r\n        // ^^ ... And same with the callback function for when a connection is made\r\n\r\n    }\r\n\r\n    // Output all the posts into a table\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>ERROR PAGE</h2>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Error;"]},"metadata":{},"sourceType":"module"}